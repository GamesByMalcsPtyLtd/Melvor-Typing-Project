interface ModifierSource {
    name: string;
}
/** Utility class for generating a unique modifier source from some other source object. */
declare class ForwardingModifierSource {
    originalSource: ModifierSource;
    get name(): string;
    constructor(originalSource: ModifierSource);
}
declare class ModifierQueryResult {
    readonly source: ModifierSource;
    readonly modifier: Modifier;
    readonly scope: IModifierScope;
    value: number;
    constructor(source: ModifierSource, modifier: Modifier, scope: IModifierScope, value: number);
}
declare class ModifierTableEntry {
    modValue: ModifierValue;
    readonly scopeUIDs: number[];
    readonly anyScopeUIDs: number[];
    readonly data: ModifierQueryResult;
    constructor(source: ModifierSource, modValue: ModifierValue, negMult: number, posMult: number);
    getValue(negMult: number, posMult: number): number;
    updateValue(negMult: number, posMult: number): void;
}
declare type QueryOption<T = NamespacedObject> = true | T[] | T;
declare type ToModifierQueryParams<T> = {
    [Property in keyof T]?: QueryOption<T[Property]>;
};
declare type ModifierQueryParams = ToModifierQueryParams<Required<IModifierScope>>;
declare type ModifierQueryArray = (QueryOption | undefined)[];
declare type ModifierScopeArray = (NamespacedObject | undefined)[];
interface ModifierQueryCache {
    query: ModifierQueryResult[];
    queryDirty: boolean;
}
declare class ModifierQuery {
    enableCaching: boolean;
    set: Set<number>;
    scopeSets: Set<number>[];
    caches: Map<ModifierTable, Map<string, ModifierQueryCache>>;
    constructor(options?: ModifierQueryParams, enableCaching?: boolean);
    add(options: ModifierQueryParams): void;
    replace(options: ModifierQueryParams): void;
    remove(options: ModifierQueryParams): void;
    addUID(uid: number, i: number): void;
    removeUID(uid: number, i: number): void;
    clear(): void;
    clone(): ModifierQuery;
    getCache(table: ModifierTable, key: string): ModifierQueryCache;
    dirtyCaches(): void;
    static readonly ANY_UID: Readonly<Required<NumberProps<IModifierScope>>>;
    static readonly SCOPE_COUNT: number;
    static getArray(options: ModifierQueryParams): ModifierQueryArray;
    static readonly EMPTY: ModifierQuery;
    static readonly ANY_SKILL: ModifierQuery;
    static readonly ANY_CURRENCY: ModifierQuery;
    static readonly ANY_DAMAGETYPE: ModifierQuery;
    static readonly ANY_CURRENCY_AND_DAMAGETYPE: ModifierQuery;
}
declare class ModifierTable {
    /** Stores the modifier entries in this table, based on their source */
    entries: Map<ModifierSource, ModifierTableEntry[]>;
    /** Maps the IDs of Modifiers to an array of entries corresponding to it */
    entriesByID: Map<string, ModifierTableEntry[]>;
    /** Maps the IDs of Modifiers to an array of query caches for that key */
    queryCaches: Map<string, WeakMap<ModifierQuery, ModifierQueryCache>>;
    valueCaches: Map<string, WeakMap<ModifierQuery, number>>;
    /**
     * Queries the table, returning all entries that match
     * @param query
     * @param queryKey
     * @returns
     */
    query(key: string, query: ModifierQuery): ModifierQueryResult[];
    getQueryCache(key: string, query: ModifierQuery): ModifierQueryCache;
    getCachedValue(key: string, query: ModifierQuery): number;
    getAndUpdateEntries(key: string, query: ModifierQuery): ModifierQueryCache;
    computeQuery(key: string, query: ModifierQuery): ModifierQueryResult[];
    /** Gets the total value of all modifiers that match the given query */
    getValue(key: string, query: ModifierQuery): number;
    dirtyValue(key: string, query: ModifierQuery): void;
    computeValue(entries: ModifierQueryResult[]): number;
    printSources(key: string, params?: ModifierQueryParams): void;
    /** Removes all modifiers stored in this table, and invalidates the entire cache */
    empty(): void;
    /**
     * Adds a new modifier value to the table
     * @param source The source of the value
     * @param modValue The value to add
     * @param negMult Multiplier to apply to "negative" modifier values
     * @param posMult Multiplier to apply to "positive" modifier values
     * @returns If a modifier that impacts combat stats changed
     */
    addModifier(source: ModifierSource, modValue: ModifierValue, negMult: number, posMult: number): void;
    /**
     * Adds an array of modifier values to the table
     * @param source The source of the values
     * @param modifiers The values to add
     * @param negMult Optional multiplier to apply to "negative" modifier values
     * @param posMult Optional multiplier to apply to "positive" modifier values
     * @returns If a modifier that impacts combat stats changed
     */
    addModifiers(source: ModifierSource, modifiers: ModifierValue[], negMult?: number, posMult?: number): void;
    /** Removes all modifiers that were added to the table from a given source */
    removeModifiers(source: ModifierSource): void;
    /** Updates the modifiers in this table, invalidating only the value cache */
    updateModifiers(source: ModifierSource, negMult: number, posMult: number): void;
    addTable(table: ModifierTable): void;
    removeTable(table: ModifierTable): void;
    getActiveModifierDescriptions(): StatDescription[];
    getEnemyModifierDescriptions(): StatDescription[];
    getModifierDescriptionsAsNodes<T extends keyof HTMLElementTagNameMap>(tagName: T, additionalClasses?: string[]): HTMLElementTagNameMap[T][];
    /** Gets a log of the modifiers that are contained in this object. Useful for debugging. */
    getLog(): NameValuePair[];
    /** Condenses the entries held within this table into a single array of ModifierValues with unique scopes */
    toCondensedValues(): ModifierValue[];
    addEntry(source: ModifierSource, entry: ModifierTableEntry): void;
    maintainCaches(removed: ModifierTableEntry[]): void;
    invalidateCaches(key: string): void;
    /** Determines if a given query matches the provided scope */
    static doesQueryMatchScopeArray(scopeArray: ModifierScopeArray, queryArray: ModifierQueryArray): boolean;
    static getScopeArray(scope: IModifierScope): ModifierScopeArray;
    static buildQueryKey(queryArray: ModifierQueryArray): string;
    static getQueryKey(options: ModifierQueryParams): string;
    static doesQueryMatchScope(scope: IModifierScope, options: ModifierQueryParams): boolean;
    static doesEntryMatchSet(entry: ModifierTableEntry, querySet: Set<number>): boolean;
}
/** A data view for an ActiveCharacterModifiers object. Provides convenience getters for CombatModifiers */
declare class CharacterModifierTable extends ModifierTable {
    readonly accuracyRating: number;
    readonly meleeAccuracyRating: number;
    readonly rangedAccuracyRating: number;
    readonly magicAccuracyRating: number;
    readonly meleeMaxHit: number;
    readonly rangedMaxHit: number;
    readonly magicMaxHit: number;
    readonly evasion: number;
    readonly meleeEvasion: number;
    readonly rangedEvasion: number;
    readonly magicEvasion: number;
    readonly flatMaxHit: number;
    readonly maxHit: number;
    readonly flatHPRegen: number;
    readonly flatAttackInterval: number;
    readonly attackInterval: number;
    readonly maxHitpoints: number;
    readonly flatMaxHitpoints: number;
    readonly reflectDamage: number;
    readonly hitpointRegeneration: number;
    readonly minHitBasedOnMaxHit: number;
    readonly attackRolls: number;
    readonly dragonBreathDamage: number;
    readonly flatReflectDamage: number;
    readonly rolledReflectDamage: number;
    readonly flatMinHit: number;
    readonly flatMagicMinHit: number;
    readonly currentHPDamageTakenOnAttack: number;
    readonly maxHPDamageTakenOnAttack: number;
    readonly damageTaken: number;
    readonly damageDealt: number;
    readonly lifesteal: number;
    readonly meleeLifesteal: number;
    readonly rangedLifesteal: number;
    readonly magicLifesteal: number;
    readonly bleedLifesteal: number;
    readonly burnLifesteal: number;
    readonly poisonLifesteal: number;
    readonly meleeCritChance: number;
    readonly rangedCritChance: number;
    readonly magicCritChance: number;
    readonly meleeProtection: number;
    readonly rangedProtection: number;
    readonly magicProtection: number;
    readonly rebirthChance: number;
    readonly summoningMaxHit: number;
    readonly otherStyleImmunity: number;
    readonly meleeImmunity: number;
    readonly rangedImmunity: number;
    readonly magicImmunity: number;
    readonly flatTotalBleedDamage: number;
    readonly stunDurationIncreaseChance: number;
    readonly flatRegenerationInterval: number;
    readonly onHitSlowMagnitude: number;
    readonly globalEvasionHPScaling: number;
    readonly flatPrayerPointsWhenHit: number;
    readonly flatMeleeAccuracyBonusPerAttackInterval: number;
    readonly flatMeleeStrengthBonusPerAttackInterval: number;
    readonly flatRangedAccuracyBonusPerAttackInterval: number;
    readonly flatRangedStrengthBonusPerAttackInterval: number;
    readonly flatMagicAccuracyBonusPerAttackInterval: number;
    readonly meleeMaxHitAgainstRanged: number;
    readonly rangedMaxHitAgainstMagic: number;
    readonly magicMaxHitAgainstMelee: number;
    readonly damageTakenAddedAsPrayerPoints: number;
    readonly accuracyRatingHPScaling: number;
    readonly sleepDurationIncreaseChance: number;
    readonly stunAvoidChance: number;
    readonly healWhenStunned: number;
    readonly healWhenSlept: number;
    readonly damageTakenPerAttack: number;
    readonly frostburnDamage: number;
    readonly flatMeleeMaxHit: number;
    readonly flatRangedMaxHit: number;
    readonly flatMagicMaxHit: number;
    readonly curseLifesteal: number;
    readonly lifestealBasedOnHPRegenEffectiveness: number;
    readonly disableHPRegeneration: number;
    readonly flatMinMeteorShowerSpellDamage: number;
    readonly endOfTurnEvasion2: number;
    readonly decreaseEnemyEvasionOnStun: number;
    readonly decreaseEnemyEvasionOnSleep: number;
    readonly doubleLifesteal: number;
    readonly maxHPBurnDamage: number;
    readonly disableLifesteal: number;
    readonly burnDOTDamageTaken: number;
    readonly bleedDOTDamageTaken: number;
    readonly poisonDOTDamageTaken: number;
    readonly deadlyPoisonDOTDamageTaken: number;
    readonly evasionAgainstMelee: number;
    readonly evasionAgainstRanged: number;
    readonly evasionAgainstMagic: number;
    readonly meleeAccuracyMaxHitPer8Strength: number;
    readonly magicMaxHitWithActivePrayer: number;
    readonly rangedStrengthBonusPer8Ranged: number;
    readonly flatBarrierSummonDamage: number;
    readonly barrierSummonDamage: number;
    readonly flatBarrierSummonDamageMelee: number;
    readonly flatBarrierSummonDamageRanged: number;
    readonly flatBarrierSummonDamageMagic: number;
    readonly barrierSummonDamageIfSlayerTask: number;
    readonly disableAttackDamage: number;
    readonly cleansed: number;
    readonly maxHitBasedOnTargetCurrentHitpoints: number;
    readonly prayerPointPreservationChancePerPoint: number;
    readonly maxHitBasedOnPrayerCost: number;
    readonly flatPrayerPointsPerMonsterKill: number;
    readonly selfDamageOnHitBasedOnCurrentHitpoints: number;
    readonly noCombatDropChance: number;
    readonly meleeAttackInterval: number;
    readonly rangedAttackInterval: number;
    readonly magicAttackInterval: number;
    readonly dodgeChance: number;
    readonly convertMissIntoHit: number;
    readonly bypassAmmoPreservationChance: number;
    readonly bypassRunePreservationChance: number;
    readonly halveAttackInterval: number;
    readonly lifestealDamageBasedOnCurrentHitpoints: number;
    readonly damageBasedOnCurrentHitpoints: number;
    readonly damageBasedOnMaxHitpoints: number;
    readonly healingWhenHit: number;
    readonly damageDealtWith2Effects: number;
    readonly unholyMarkOnHit: number;
    readonly damageTakenBasedOnHP: number;
    readonly curseOnHitWithUnholyMark: number;
    readonly flatBarrierDamage: number;
    readonly damageDealtPerEffect: number;
    readonly regenPerDamageTaken: number;
    readonly summoningAttackInterval: number;
    readonly flatSummoningAttackInterval: number;
    readonly cantAttack: number;
    readonly cantEvade: number;
    readonly cantRegenBarrier: number;
    readonly critChance: number;
    readonly cantSpecialAttack: number;
    readonly lacerationLifesteal: number;
    readonly damageTakenPerMissedAttack: number;
    readonly flatAbyssalSlayerAreaEffectNegation: number;
    readonly cantMiss: number;
    readonly rawReflectDamage: number;
    readonly evasionBasedOnCorruptionLevel: number;
    readonly ablazeDOTDamageTakenIfCorrupted: number;
    readonly dotDamageTaken: number;
    readonly bonusCorruptionChance: number;
    readonly extraCorruptions: number;
    readonly corruptionCounterRate: number;
    readonly critMultiplier: number;
    readonly damageBasedOnMaxHitpointsSelf: number;
    readonly toxinDOTDamageTaken: number;
    readonly ablazeDOTDamageTaken: number;
    readonly ablazeLifesteal: number;
    readonly toxinLifesteal: number;
    readonly meleeMinHitBasedOnMaxHit: number;
    readonly rangedMinHitBasedOnMaxHit: number;
    readonly magicMinHitBasedOnMaxHit: number;
    readonly lacerationDOTDamageTaken: number;
    readonly voidburstDOTDamageTaken: number;
    readonly instantCorruptionChance: number;
    readonly extraLacerationStackChance: number;
    readonly flatSlayerAreaEffectNegation: number;
    constructor();
    init(game: Game): void;
    /** Iterates on each entry in the table with a damageType scoping */
    forEachDamageType(key: string, callbackFn: (value: number, damageType: DamageType) => void): void;
    /** Iterates on each entry in the table with a currency scoping */
    forEachCurrency(key: string, callbackFn: (value: number, currency: Currency) => void): void;
    getDOTLifesteal(type: DOTType): number;
    getCritChance(type: AttackType): number;
    getProtectionValue(type: AttackType): number;
    getImmunity(type: AttackType): boolean;
    getFlatReflectDamage(): number;
    getRolledReflectDamage(): number;
    getReflectPercent(): number;
}
/** A data view for an ActivePlayerModifiers object. Provides convenience getters for NonCombatModifiers */
declare class PlayerModifierTable extends CharacterModifierTable {
    readonly doubleSlayerTaskKillChance: number;
    readonly convertBoneDropsIntoCake: number;
    readonly combatLootDoublingChance: number;
    readonly damageDealtToBosses: number;
    readonly damageDealtToSlayerTasks: number;
    readonly damageDealtToAllMonsters: number;
    readonly autoEatEfficiency: number;
    readonly autoEatThreshold: number;
    readonly autoEatHPLimit: number;
    readonly foodHealingValue: number;
    readonly prayerPointPreservationChance: number;
    readonly flatPrayerPointCost: number;
    readonly ammoPreservationChance: number;
    readonly runePreservationChance: number;
    readonly flatMonsterRespawnInterval: number;
    readonly bankSpace: number;
    readonly potionChargePreservationChance: number;
    readonly masteryXP: number;
    readonly skillXP: number;
    readonly flatMiningNodeHP: number;
    readonly dungeonEquipmentSwapping: number;
    readonly strongholdEquipmentSwapping: number;
    readonly equipmentSets: number;
    readonly autoSlayerUnlocked: number;
    readonly treeCutLimit: number;
    readonly skillPreservationChance: number;
    readonly slayerTaskLength: number;
    readonly globalItemDoublingChance: number;
    readonly golbinRaidWaveSkipCost: number;
    readonly golbinRaidMaximumAmmo: number;
    readonly golbinRaidMaximumRunes: number;
    readonly golbinRaidMinimumFood: number;
    readonly golbinRaidPrayerLevel: number;
    readonly golbinRaidStartingPrayerPoints: number;
    readonly golbinRaidPrayerPointsPerWave: number;
    readonly golbinRaidStartingRuneCount: number;
    readonly golbinRaidPassiveSlotUnlocked: number;
    readonly golbinRaidPrayerUnlocked: number;
    readonly golbinRaidStartingWeapon: number;
    readonly flatPotionCharges: number;
    readonly potionCharges: number;
    readonly noMiningNodeDamageChance: number;
    readonly elementalRuneChance: number;
    readonly elementalRuneQuantity: number;
    readonly randomHerblorePotionChance: number;
    readonly freeBonfires: number;
    readonly altMagicSkillXP: number;
    readonly seedDropConversionChance: number;
    readonly flatMagicDefenceBonus: number;
    readonly hpRegenWhenEnemyHasMoreEvasion: number;
    readonly summoningAttackLifesteal: number;
    readonly bonusFishingSpecialChance: number;
    readonly summoningSynergy_Ent_Leprechaun: number;
    readonly woodcuttingJewelryChance: number;
    readonly summoningSynergy_4_5: number;
    readonly cookingSuccessCap: number;
    readonly miningBarChance: number;
    readonly fishingCookedChance: number;
    readonly summoningSynergy_Octopus_Leprechaun: number;
    readonly magicMinHitBasedOnMaxHitSlayerTask: number;
    readonly meleeMinHitBasedOnMaxHitSlayerTask: number;
    readonly flatHPRegenBasedOnMeleeMaxHit: number;
    readonly rangedMinHitBasedOnMaxHitSlayerTask: number;
    readonly flatHPRegenBasedOnRangedMaxHit: number;
    readonly slayerCoinsPerMagicDamageSlayerTask: number;
    readonly flatHPRegenBasedOnMagicMaxHit: number;
    readonly flatCraftingDragonhideCost: number;
    readonly giveRandomComboRunesRunecrafting: number;
    readonly thievingMinerRandomBarChance: number;
    readonly thievingFarmerHerbSackChance: number;
    readonly summoningSynergy_Leprechaun_Devil: number;
    readonly hitpointRegenerationAgainstSlayerTasks: number;
    readonly flatSmithingCoalCost: number;
    readonly removeSmithingCoalCosts: number;
    readonly meleeStrengthBonus: number;
    readonly rangedStrengthBonus: number;
    readonly magicDamageBonus: number;
    readonly agilityObstacleCost: number;
    readonly freeCompost: number;
    readonly compostPreservationChance: number;
    readonly bypassCompostPreservationChance: number;
    readonly offItemChance: number;
    readonly miningGemChance: number;
    readonly bonusCoalMining: number;
    readonly smithingCoalCost: number;
    readonly allowSignetDrops: number;
    readonly bonusCoalOnDungeonCompletion: number;
    readonly masteryPoolProgress: number;
    readonly doubleRuneProvision: number;
    readonly bypassSlayerItems: number;
    readonly itemProtection: number;
    readonly redemptionThreshold: number;
    readonly redemptionHealing: number;
    readonly autoLooting: number;
    readonly autoBurying: number;
    readonly freeProtectItem: number;
    readonly flatSummoningShardCost: number;
    readonly summoningChargePreservationChance: number;
    readonly summoningChargePreservationChanceBypass: number;
    readonly prayerPointCost: number;
    readonly allowAttackAugmentingMagic: number;
    readonly autoEquipFoodUnlocked: number;
    readonly autoSwapFoodUnlocked: number;
    readonly successfulCookChance: number;
    readonly perfectCookChance: number;
    readonly thievingStealth: number;
    readonly altMagicRunePreservationChance: number;
    readonly fishingSpecialChance: number;
    readonly farmingSeedCost: number;
    readonly flatFarmingSeedCost: number;
    readonly foodPreservationChance: number;
    readonly allowLootContainerStacking: number;
    readonly woodcuttingXPAddedAsFiremakingXP: number;
    readonly flatCoalGainedOnCookingFailure: number;
    readonly flatAbyssalGemsGainedOnCookingFailure: number;
    readonly halveWoodcuttingDoubleChance: number;
    readonly qualitySuperiorGemChance: number;
    readonly doubleBoneDrops: number;
    readonly summoningSynergy_Devil_Eagle: number;
    readonly xpFromNegativeObstacles: number;
    readonly masteryXPFromNegativeObstacles: number;
    readonly thievingStunInterval: number;
    readonly skillInterval: number;
    readonly woodcuttingArrowShaftChance: number;
    readonly passiveCookingInterval: number;
    readonly disableGoldenStardustDrops: number;
    readonly gpFromItemAlchemy: number;
    readonly thievingAreaUniqueChance: number;
    readonly meteoriteLocationChance: number;
    readonly additionalPerfectItemChance: number;
    readonly flatTownshipPopulation: number;
    readonly flatTownshipHappiness: number;
    readonly flatTownshipEducation: number;
    readonly townshipHealth: number;
    readonly townshipGPProduction: number;
    readonly townshipMaxStorage: number;
    readonly townshipBuildingCost: number;
    readonly townshipTaxPerCitizen: number;
    readonly townshipDisableHunting: number;
    readonly townshipResourceProduction: number;
    readonly townshipCoalUsage: number;
    readonly townshipBuildingHappinessPenalties: number;
    readonly townshipFoodUsage: number;
    readonly consumablePreservationChance: number;
    readonly gemVeinChance: number;
    readonly abyssalGemVeinChanceIncrease: number;
    readonly abyssalWaveAPGain: number;
    readonly abyssalWaveASCGain: number;
    readonly nonCombatSkillXP: number;
    readonly flatMeleeDefenceBonus: number;
    readonly flatRangedDefenceBonus: number;
    readonly flatStabAttackBonus: number;
    readonly flatSlashAttackBonus: number;
    readonly flatBlockAttackBonus: number;
    readonly flatRangedAttackBonus: number;
    readonly flatMagicAttackBonus: number;
    readonly flatMeleeStrengthBonus: number;
    readonly flatRangedStrengthBonus: number;
    readonly disableSalamanderItemReduction: number;
    readonly masteryPoolCap: number;
    readonly bypassAllSlayerItems: number;
    readonly allowNonMagicCurses: number;
    readonly townshipTraderStock: number;
    readonly cartographySightRange: number;
    readonly cartographySurveyRange: number;
    readonly cartographyTravelCost: number;
    readonly cartographySurveyInterval: number;
    readonly cartographyPaperMakingInterval: number;
    readonly cartographyMapUpgradeInterval: number;
    readonly cartographySurveyXP: number;
    readonly mapUpgradeActions: number;
    readonly initialMapArtefactValues: number;
    readonly sieveToolLevel: number;
    readonly trowelToolLevel: number;
    readonly brushToolLevel: number;
    readonly shovelToolLevel: number;
    readonly ancientRelicLocationChance: number;
    readonly flatAdditionalHolyDustFromBlessedOffering: number;
    readonly flatPrayerPointsFromBurying: number;
    readonly additionalSameAreaFishChance: number;
    readonly skillPetLocationChance: number;
    readonly prayerPointsFromBurying: number;
    readonly ignoreThievingDamage: number;
    readonly xpFromMasteryTokens: number;
    readonly craftingEnchantedUrnChance: number;
    readonly halveSkillInterval: number;
    readonly halveSkillXP: number;
    readonly halveMasteryXP: number;
    readonly flatMasteryTokens: number;
    readonly townshipRepairCost: number;
    readonly townshipTraderCost: number;
    readonly enableNightfallSeason: number;
    readonly enableSolarEclipseSeason: number;
    readonly enableEternalDarknessSeason: number;
    readonly allowUnholyPrayerUse: number;
    readonly unholyPrayerPointPreservationChance: number;
    readonly disableTownshipHealthDegradation: number;
    readonly minimumTownshipBuildingEfficiency: number;
    readonly enableLemonSeason: number;
    readonly bypassGlobalPreservationChance: number;
    readonly unlockAllSummoningSynergies: number;
    readonly agilityItemCostReductionCanReach100: number;
    readonly agilityObstacleItemCost: number;
    readonly removeDebuffsFromAgility: number;
    readonly harvestingUniqueProductChance: number;
    readonly doubleModifiersInAstrologyForMaxedConstellations: number;
    readonly mapRefinementCost: number;
    readonly travelEventChance: number;
    readonly tinyArtefactChance: number;
    readonly smallArtefactChance: number;
    readonly mediumArtefactChance: number;
    readonly largeArtefactChance: number;
    readonly tinyArtefactValue: number;
    readonly smallArtefactValue: number;
    readonly mediumArtefactValue: number;
    readonly largeArtefactValue: number;
    readonly archaeologyVeryRareMapPreservation: number;
    readonly archaeologyCommonItemSkillXP: number;
    readonly flatDigSiteMapCharges: number;
    readonly disabledSpecialAttacks: number;
    readonly meleeStrengthBonusPer10EnemyDR: number;
    readonly doubleConsumablesArchaeology: number;
    readonly doubleActiveModifiersCartography: number;
    readonly soulPointPreservationChance: number;
    readonly soulPointPreservationChanceBypass: number;
    readonly skillCostReduction: number;
    readonly hPRegenBasedOnMaxHP: number;
    readonly abyssalSkillXP: number;
    readonly regainAbyssalTreeSeedChance: number;
    readonly abyssalGemChance: number;
    readonly ignoreThievingDamageChance: number;
    readonly flatAdditionalPrimaryProductQuantity: number;
    readonly flatSoulPointsPerMonsterKill: number;
    readonly flatSoulPointCost: number;
    readonly soulPointCost: number;
    readonly flatHarvestingIntensity: number;
    readonly doubleHarvestingIntensityChance: number;
    readonly townshipMaxSoulStorage: number;
    readonly starFallChance: number;
    readonly skillPreservationCap: number;
    readonly flatDrakeNestsFromThievingTreant: number;
    readonly woodcuttingDrakeNestJewelryChance: number;
    readonly woodcuttingAXPAddedAsFiremakingAXP: number;
    readonly additionalAbyssalGemChance: number;
    readonly randomBarThievingWitheringRuinsChance: number;
    readonly summoningSynergy_Imp_Devil: number;
    readonly summoningSynergy_Abyssal_Leprechaun_Devil: number;
    readonly flatSoulPointsWhenHit: number;
    readonly maxHitWith2AbyssalPrayers: number;
    readonly minimumHarvestingIntensity: number;
    readonly disableHarvestingVeinDegen: number;
    readonly abyssalPrayerCost: number;
    readonly flatCombatAXPAgainstCorruptedMonsters: number;
    readonly farmingCropsCannotDie: number;
    readonly cannotFishJunk: number;
    readonly fishingAdditionalSpecialItemChance: number;
    readonly miningNodeRespawnInterval: number;
    readonly runecraftingBaseXPForRunes: number;
    readonly runecraftingBaseAXPForRunes: number;
    readonly flatTier1SummoningShardCost: number;
    readonly flatTier2SummoningShardCost: number;
    readonly flatTier3SummoningShardCost: number;
    readonly thievingAreaUniqueChancePercent: number;
    readonly meleeStrengthBonusWith2HWeapon: number;
    readonly evasionWith2HWeapon: number;
    readonly flatMeleeDefenceBonusPerAbyssalLevel: number;
    readonly flatRangedDefenceBonusPerAbyssalLevel: number;
    readonly flatMagicDefenceBonusPerAbyssalLevel: number;
    readonly abyssalCombatSkillXP: number;
    readonly rangedStrengthBonusWith2HWeapon: number;
    readonly magicDamageBonusWith2HWeapon: number;
    readonly flatSoulPointsFromReleasing: number;
    readonly slayerTaskExtensionCost: number;
    readonly slayerTaskCost: number;
    readonly permanentCorruptionCost: number;
    readonly slashAttackBonus: number;
    readonly meleeAccuracyRatingWith2H: number;
    readonly useNoSummoningChargesAbyssalOctopus: number;
    readonly flatSkillInterval: number;
    readonly actionsPerClick: number;
    readonly doubleActionsPerClickChance: number;
    readonly extraActionPerClickChance: number;
    readonly doubleSoulDropChance: number;
    readonly doubleSoulDrops: number;
    readonly placeholderModifier: number;
    readonly nonShardSummoningCostReduction: number;
    readonly firemakingBonfireInterval: number;
    readonly astrologyModifierCost: number;
    readonly flatAdditionalThievingCommonDropQuantity: number;
    getRunePreservationChance(): number;
    getAmmoPreservationChance(): number;
    getFoodPreservationChance(): number;
    constructor();
    init(game: Game): void;
    getHiddenSkillLevels(skill: AnySkill): number;
    getInstantActionsToPerform(): number;
}
/** Utility class for formatting and creating modifier source spans */
declare class ModifierSourceBuilder {
    modifiers: ModifierTable;
    percent: boolean;
    _totalValue: number;
    _spans: HTMLSpanElement[];
    _totalValueSpan: HTMLSpanElement;
    constructor(modifiers: ModifierTable, percent?: boolean, totalLangString?: string);
    addBaseSource(sourceName: string, value: number, isPositive?: boolean): void;
    addSources(key: string, query?: ModifierQuery, mult?: number): void;
    getSpans(): HTMLSpanElement[];
}
